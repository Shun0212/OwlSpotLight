// The module 'vscode' contains the VS Code extensibility API
// Import the module and reference it with the alias vscode in your code below
import * as vscode from 'vscode';
import * as path from 'path';

// „ÇØ„É©„ÇπÂ§ñ„Å´getNonce„ÇíÂÆöÁæ©
function getNonce() {
	let text = '';
	const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
	for (let i = 0; i < 32; i++) {
		text += possible.charAt(Math.floor(Math.random() * possible.length));
	}
	return text;
}

// WebviewViewProvider„Åß„Çµ„Ç§„Éâ„Éê„ÉºUI„Çí„É™„ÉÉ„ÉÅÂåñ
class OwlspotlightSidebarProvider implements vscode.WebviewViewProvider {
	public static readonly viewType = 'owlspotlight.sidebar';
	private _view?: vscode.WebviewView;

	constructor(private readonly _context: vscode.ExtensionContext) {}

	resolveWebviewView(
		webviewView: vscode.WebviewView,
		context: vscode.WebviewViewResolveContext,
		_token: vscode.CancellationToken
	) {
		this._view = webviewView;
		webviewView.webview.options = {
			enableScripts: true,
			localResourceRoots: [this._context.extensionUri]
		};
		webviewView.webview.html = this.getHtmlForWebview(webviewView.webview);

		// Webview„Åã„Çâ„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏Âèó‰ø°
		webviewView.webview.onDidReceiveMessage(async (msg) => {
			if (msg.command === 'search') {
				const query = msg.text;
				const workspaceFolders = vscode.workspace.workspaceFolders;
				if (!workspaceFolders || workspaceFolders.length === 0) {
					webviewView.webview.postMessage({ type: 'error', message: '„ÉØ„Éº„ÇØ„Çπ„Éö„Éº„Çπ„Éï„Ç©„É´„ÉÄ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì' });
					return;
				}
				const folderPath = workspaceFolders[0].uri.fsPath;
				webviewView.webview.postMessage({ type: 'status', message: '„Ç§„É≥„Éá„ÉÉ„ÇØ„ÇπÊßãÁØâ‰∏≠...' });
				await fetch('http://localhost:8000/build_index', {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ directory: folderPath, file_ext: '.py' })
				});
				webviewView.webview.postMessage({ type: 'status', message: 'Ê§úÁ¥¢‰∏≠...' });
				const res = await fetch('http://localhost:8000/search_functions_simple', {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ directory: folderPath, query, top_k: 10 })
				});
				const data: any = await res.json();
				if (data && data.results && Array.isArray(data.results) && data.results.length > 0) {
					webviewView.webview.postMessage({ type: 'results', results: data.results, folderPath });
				} else {
					webviewView.webview.postMessage({ type: 'results', results: [], folderPath });
				}
			}
			if (msg.command === 'jump') {
				const file = msg.file;
				const line = msg.line;
				try {
					const uri = vscode.Uri.file(file);
					const doc = await vscode.workspace.openTextDocument(uri);
					const editor = await vscode.window.showTextDocument(doc);
					const lineNum = Number(line) - 1;
					const pos = new vscode.Position(lineNum > 0 ? lineNum : 0, 0);
					editor.selection = new vscode.Selection(pos, pos);
					editor.revealRange(new vscode.Range(pos, pos), vscode.TextEditorRevealType.InCenter);
					const decorationType = vscode.window.createTextEditorDecorationType({ backgroundColor: 'rgba(255,0,0,0.3)' });
					editor.setDecorations(decorationType, [new vscode.Range(pos, pos.translate(1, 0))]);

					// --- AST„Éô„Éº„Çπ„ÅÆÈñ¢Êï∞ & „ÇØ„É©„ÇπÁØÑÂõ≤„Éè„Ç§„É©„Ç§„Éà ---
					let symbols: vscode.DocumentSymbol[] | undefined = [];
					try {
						symbols = await vscode.commands.executeCommand<vscode.DocumentSymbol[]>(
							'vscode.executeDocumentSymbolProvider',
							doc.uri
						) ?? [];
					} catch (e) {
						symbols = [];
					}
					function findSymbol(list: vscode.DocumentSymbol[], pos: vscode.Position): vscode.DocumentSymbol | undefined {
						for (const s of list) {
							if (s.range.contains(pos)) {
								// Â≠ê„ÇíÂÑ™ÂÖàÔºàÂÖ•„ÇåÂ≠êÂØæÂøúÔºâ
								return findSymbol(s.children, pos) ?? s;
							}
						}
						return undefined;
					}
					const target = findSymbol(symbols, pos);
					if (target) {
						// Èñ¢Êï∞
						if (target.kind === vscode.SymbolKind.Function) {
							const funcDeco = vscode.window.createTextEditorDecorationType({ backgroundColor: 'rgba(0,200,0,0.15)' });
							editor.setDecorations(funcDeco, [target.range]);
						}
						// „ÇØ„É©„ÇπÔºàË¶™Êé¢Á¥¢Ôºâ
						let cls: any = (target as any).parent;
						while (cls && cls.kind !== vscode.SymbolKind.Class) { cls = cls.parent; }
						if (cls && cls.kind === vscode.SymbolKind.Class) {
							const classDeco = vscode.window.createTextEditorDecorationType({ backgroundColor: 'rgba(0,128,255,0.15)' });
							editor.setDecorations(classDeco, [cls.range]);
						}
					} else {
						// --- „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: Êóß„Ç§„É≥„Éá„É≥„ÉàËµ∞Êüª ---
						console.log('[OwlSpotlight] fallback: using old indent-based range detection');
						const text = doc.getText();
						const lines = text.split('\n');
						let classStart = -1;
						let classEnd = -1;
						let funcIndent = lines[lineNum].search(/\S|$/);
						for (let i = lineNum; i >= 0; i--) {
							const l = lines[i];
							if (/^\s*class\s+\w+/.test(l)) {
								classStart = i;
								break;
							}
						}
						if (classStart !== -1) {
							const classIndent = lines[classStart].search(/\S|$/);
							if (funcIndent > classIndent) {
								for (let i = classStart + 1; i < lines.length; i++) {
									const l = lines[i];
									if (l.trim() === '') { continue; }
									const indent = l.search(/\S|$/);
									if (indent <= classIndent && i > classStart && (/^\s*def\s+\w+/.test(l) || /^\s*class\s+\w+/.test(l))) {
										classEnd = i - 1;
										break;
									}
								}
								if (classEnd === -1) { classEnd = lines.length - 1; }
								const classDeco = vscode.window.createTextEditorDecorationType({ backgroundColor: 'rgba(0,128,255,0.15)' });
								const startPos = new vscode.Position(classStart, 0);
								const endPos = new vscode.Position(classEnd, lines[classEnd].length);
								editor.setDecorations(classDeco, [new vscode.Range(startPos, endPos)]);
							}
						}
						// --- „Çµ„Éº„Éê„Éº„Åã„ÇâÈñ¢Êï∞ÁØÑÂõ≤ÂèñÂæóÔºÜ„Éè„Ç§„É©„Ç§„ÉàÔºàÊóßÊñπÂºèÔºâ ---
						if (msg.funcName) {
							const res = await fetch('http://localhost:8000/get_function_range', {
								method: 'POST',
								headers: { 'Content-Type': 'application/json' },
								body: JSON.stringify({ file, func_name: msg.funcName })
							});
							if (res.ok) {
								const data = await res.json() as any;
								if (data && typeof data.start_line === 'number' && typeof data.end_line === 'number') {
									const startPos = new vscode.Position(data.start_line - 1, 0);
									const endLineText = doc.lineAt(data.end_line - 1).text;
									const endPos = new vscode.Position(data.end_line - 1, endLineText.length);
									const funcDeco = vscode.window.createTextEditorDecorationType({ backgroundColor: 'rgba(0,200,0,0.15)' });
									editor.setDecorations(funcDeco, [new vscode.Range(startPos, endPos)]);
								}
							}
						}
					}
				} catch (e) {
					vscode.window.showErrorMessage('„Éï„Ç°„Ç§„É´„ÇíÈñã„Åë„Åæ„Åõ„Çì„Åß„Åó„Åü: ' + file);
				}
			}
			if (msg.command === 'startServer') {
				console.log('[OwlSpotlight] startServer command received from Webview');
				// Webview„Åã„Çâ„ÅÆ„Çµ„Éº„Éê„ÉºËµ∑ÂãïË¶ÅÊ±Ç„ÅØ„Ç≥„Éû„É≥„ÉâÁµåÁî±„ÅßÂÆüË°å
				void vscode.commands.executeCommand('owlspotlight.startServer');
			}
		});
	}

	getHtmlForWebview(webview: vscode.Webview): string {
		const nonce = getNonce();
		const scriptUri = webview.asWebviewUri(
			vscode.Uri.joinPath(this._context.extensionUri, 'media', 'main.js')
		);
		const styleUri = webview.asWebviewUri(
			vscode.Uri.joinPath(this._context.extensionUri, 'media', 'styles.css')
		);
		return `<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta
    http-equiv="Content-Security-Policy"
    content="
      default-src 'none';
      img-src ${webview.cspSource} https:;
      style-src ${webview.cspSource} 'unsafe-inline';
      script-src 'nonce-${nonce}';
      connect-src http://127.0.0.1:8000 ${webview.cspSource};
    ">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>OwlSpotlight</title>
  <link rel="stylesheet" href="${styleUri}">
</head>
<body>
  <div class="header">ü¶â OwlSpotLight</div>
  <div class="actions">
    <button id="startServerBtn">Start Server</button>
  </div>
  <div class="searchbar">
    <input id="searchInput" type="text" placeholder="Search by function name or code snippet..." />
    <button id="searchBtn">Search</button>
  </div>
  <div class="status" id="status"></div>
  <div class="results" id="results"></div>
  <script nonce="${nonce}" src="${scriptUri}"></script>
</body>
</html>`;
	}
}

// „ÇØ„É©„ÇπÁØÑÂõ≤„Éè„Ç§„É©„Ç§„ÉàÁî®„ÅÆ„Ç∞„É≠„Éº„Éê„É´Â§âÊï∞
let lastClassDeco: vscode.TextEditorDecorationType | null = null;
let lastClassEditor: vscode.TextEditor | null = null;

export function activate(context: vscode.ExtensionContext) {
	console.log('Congratulations, your extension "owlspotlight" is now active!');

	// „Çµ„Ç§„Éâ„Éê„ÉºWebviewViewProviderÁôªÈå≤
	context.subscriptions.push(
		vscode.window.registerWebviewViewProvider(
			OwlspotlightSidebarProvider.viewType,
			new OwlspotlightSidebarProvider(context)
		)
	);

	// „Ç≥„Éû„É≥„Éâ„Éë„É¨„ÉÉ„Éà„Åã„Çâ„ÅÆÊ§úÁ¥¢„Ç≥„Éû„É≥„Éâ„ÅØ„Çµ„Ç§„Éâ„Éê„Éº„ÇíÈñã„ÅèÂãï‰Ωú„Å´Â§âÊõ¥
	context.subscriptions.push(
		vscode.commands.registerCommand('owlspotlight.searchCode', async () => {
			// Ê≠£„Åó„ÅÑView ID„Åß„Çµ„Ç§„Éâ„Éê„Éº„ÇíÈñã„Åè
			await vscode.commands.executeCommand('workbench.view.extension.owlspotlight');
			vscode.commands.executeCommand('owlspotlight.sidebar.focus');
			vscode.window.showInformationMessage('„Çµ„Ç§„Éâ„Éê„Éº„Åã„ÇâÊ§úÁ¥¢„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
		})
	);

	// „Çµ„Éº„Éê„ÉºËµ∑Âãï„Ç≥„Éû„É≥„Éâ„ÅØ„Åù„ÅÆ„Åæ„Åæ
	const startServerDisposable = vscode.commands.registerCommand('owlspotlight.startServer', async () => {
		const serverDir = path.join(context.extensionPath, 'model_server');
		const terminal = vscode.window.createTerminal({
			name: 'OwlSpotlight Server',
			cwd: serverDir // model_server„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅßÂøÖ„ÅöËµ∑Âãï
		});
		// venvÊúâÂäπÂåñ+uvicornËµ∑Âãï
		terminal.sendText('source .venv/bin/activate', true);
		terminal.sendText('uvicorn server:app --host 127.0.0.1 --port 8000 --reload', true);
		terminal.show();
		vscode.window.showInformationMessage('OwlSpotlight„Çµ„Éº„Éê„Éº„ÇíÊñ∞„Åó„ÅÑ„Çø„Éº„Éü„Éä„É´„ÅßËµ∑Âãï„Åó„Åæ„Åó„Åü');
	});
	context.subscriptions.push(startServerDisposable);

	// --- Áí∞Â¢É„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„Ç≥„Éû„É≥„Éâ„ÇíËøΩÂä† ---
	const setupEnvDisposable = vscode.commands.registerCommand('owlspotlight.setupEnv', async () => {
		const serverDir = path.join(context.extensionPath, 'model_server');
		const terminal = vscode.window.createTerminal({
			name: 'OwlSpotlight Setup',
			cwd: serverDir
		});
		terminal.show();
		// pyenv„ÅåÂÖ•„Å£„Å¶„ÅÑ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ„Åó„ÄÅ„Å™„Åë„Çå„Å∞„Ç§„É≥„Çπ„Éà„Éº„É´Ê°àÂÜÖ
		terminal.sendText('if ! command -v pyenv >/dev/null 2>&1; then echo "[OwlSpotlight] pyenv is not installed. Please install pyenv first. For example: brew install pyenv"; exit 1; fi', true);
		// Python 3.11„Ååpyenv„ÅßÂÖ•„Å£„Å¶„ÅÑ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ„Åó„ÄÅ„Å™„Åë„Çå„Å∞„Ç§„É≥„Çπ„Éà„Éº„É´Ê°àÂÜÖ
		terminal.sendText('if ! pyenv versions --bare | grep -q "^3.11"; then echo "[OwlSpotlight] Python 3.11 is not installed in pyenv. Please run: pyenv install 3.11"; exit 1; fi', true);
		// pyenv local 3.11 & venv‰ΩúÊàê
		terminal.sendText('pyenv local 3.11', true);
		terminal.sendText('python3.11 -m venv .venv', true);
		terminal.sendText('source .venv/bin/activate', true);
		terminal.sendText('pip install --upgrade pip', true);
		terminal.sendText('pip install -r requirements.txt', true);
		vscode.window.showInformationMessage('OwlSpotlight Python 3.11Áí∞Â¢É„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„Ç≥„Éû„É≥„Éâ„ÇíÊñ∞„Åó„ÅÑ„Çø„Éº„Éü„Éä„É´„ÅßÂÆüË°å„Åó„Åæ„Åó„Åü„ÄÇpyenv„ÇÑPython 3.11„ÅåÊú™„Ç§„É≥„Çπ„Éà„Éº„É´„ÅÆÂ†¥Âêà„ÅØÊåáÁ§∫„Å´Âæì„Å£„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇÂÆå‰∫ÜÂæå„Å´„Çµ„Éº„Éê„Éº„ÇíËµ∑Âãï„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
	});
	context.subscriptions.push(setupEnvDisposable);
}

export function deactivate() {}
